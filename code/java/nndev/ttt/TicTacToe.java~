package ttt;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TicTacToe extends JFrame implements MouseListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 3796771084591745249L;
	
	
	ImageIcon picIconX;
	ImageIcon picIconO;
	ImageIcon picIconBoard;
	Image x;
	Image o;
	Image board;
	
	int[] moveList = new int[9];
    	

	int playCount = 1;
	int xPos = 0;
	int yPos = 0;
	int winner = 0;
	
	int gameOver = 0;
	
	final int P1WIN = 1;
	final int P2WIN = 2;
	final int CATGAME = 3;

	JPanel gamePanel;

	public static void main(String[] args) {
		TicTacToe game = new TicTacToe();
		
		game.Game();
	}
	
	public void Game() {
		picIconX = new ImageIcon("X.png");
		picIconO = new ImageIcon("O.png");
		picIconBoard = new ImageIcon("board.png");
		x = picIconX.getImage();
		o = picIconO.getImage();
		board = picIconBoard.getImage();
		
		for(int i = 0; i < 9; i++) {
			moveList[i] = 0;
			//System.out.println("moveList" + i + moveList[i]);
		}

		this.setTitle("TicTacToe");
		this.setSize(300, 300);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gamePanel = new JPanel();
		this.add(gamePanel);
		addMouseListener(this);
		this.setVisible(true);

		while(gameOver == 0) {
			gameOver = checkWin();
			//System.out.println("checking win " + gameOver);
		}

		displayWinner();
		
		exit();
		
	}
	
	public void paint(Graphics g) {
		g.drawImage(board,50,50, this);
		if(moveList[0] == 1) { //block 1
			g.drawImage(x, 65, 70, this);
		}
		if(moveList[1] == 1) { //block 
			g.drawImage(x, 131, 70, this);
		}
		if(moveList[2] == 1) { //block 3
			g.drawImage(x, 193, 70, this);
		}
		if(moveList[3] == 1) { //block 4
			g.drawImage(x, 65, 134, this);
		}
		if(moveList[4] == 1) { //block 5
			g.drawImage(x, 131, 134, this);
		}
		if(moveList[5] == 1) { //block 6
			g.drawImage(x, 193, 134, this);
		}
		if(moveList[6] == 1) { //block 7
			g.drawImage(x, 65, 193, this);
		}
		if(moveList[7] == 1) { //block 8
			g.drawImage(x, 131, 193, this);
		}
		if(moveList[8] == 1) { //block 9
			g.drawImage(x, 193, 193, this);
		}

		if(moveList[0] == 2) { //block 1
			g.drawImage(o, 65, 70, this);
		}
		if(moveList[1] == 2) { //block 2
			g.drawImage(o, 131, 70, this);
		}
		if(moveList[2] == 2) { //block 3
			g.drawImage(o, 193, 70, this);
		}
		if(moveList[3] == 2) { //block 4
			g.drawImage(o, 65, 134, this);
		}
		if(moveList[4] == 2) { //block 5
			g.drawImage(o, 131, 134, this);
		}
		if(moveList[5] == 2) { //block 6
			g.drawImage(o, 193, 134, this);
		}
		if(moveList[6] == 2) { //block 7
			g.drawImage(o, 65, 193, this);
		}
		if(moveList[7] == 2) { //block 8
			g.drawImage(o, 131, 193, this);
		}
		if(moveList[8] == 2) { //block 9
			g.drawImage(o, 193, 193, this);
		}
	}
	public void move(int x, int y) {
		xPos = x;
		yPos = y;
		//System.out.println("x pos = " + xPos);
		//System.out.println("y pos = " + yPos);

		if(xPos >= 60 && xPos <=110 && yPos >= 60 && yPos<=110) { //block 1
			if(playCount % 2 > 0 && moveList[0] == 0) {
				moveList[0] = 1;
				playCount++;
			} else if(moveList[0]==0) {
				moveList[0] = 2;
				playCount++;
			}
		} else if(xPos >= 125 && xPos <=175 && yPos >= 60 && yPos<=110) { //block 2
			if(playCount % 2 > 0 && moveList[1] == 0) {
				moveList[1] = 1;
				playCount++;
			} else if(moveList[1]==0) {
				moveList[1] = 2;
				playCount++;
			}		
		} else if(xPos >= 188 && xPos <=240 && yPos >= 60 && yPos<=110) { //block 3
			if(playCount % 2 > 0 && moveList[2]==0) {
				moveList[2] = 1;
				playCount++;
			} else if(moveList[2]==0) {
				moveList[2] = 2;
				playCount++;
			}
		} else if(xPos >= 60 && xPos <=110 && yPos >= 123 && yPos<=178) { //block 4
			if(playCount % 2 > 0 && moveList[3]==0) {
				moveList[3] = 1;
				playCount++;
			} else if(moveList[3]==0) {
				moveList[3] = 2;
				playCount++;
			}
		} else if(xPos >= 125 && xPos <=175 && yPos >= 123 && yPos<=178) { //block 5
			if(playCount % 2 > 0 && moveList[4] ==0) {
				moveList[4] = 1;
				playCount++;
			} else if(moveList[4]==0) {
				moveList[4] = 2;
				playCount++;
			}
		} else if(xPos >= 188 && xPos <=240 && yPos >= 123 && yPos<=178) { //block 6
			if(playCount % 2 > 0 && moveList[5] == 0) {
				moveList[5] = 1;
				playCount++;
			} else if(moveList[5]==0) {
				moveList[5] = 2;
				playCount++;
			}			
		} else if(xPos >= 60 && xPos <=110 && yPos >= 189 && yPos<=242) { //block 7
			if(playCount % 2 > 0 && moveList[6] ==0) {
				moveList[6] = 1;
				playCount++;
			} else if(moveList[6]==0) {
				moveList[6] = 2;
				playCount++;
			}
		} else if(xPos >= 125 && xPos <=175 && yPos >= 189 && yPos<=242) { //block 8
			if(playCount % 2 > 0 && moveList[7]==0) {
				moveList[7] = 1;
				playCount++;
			} else if(moveList[7]==0) {
				moveList[7] = 2;
				playCount++;
			}
		} else if(xPos >= 188 && xPos <=240 && yPos >= 189 && yPos<=242) { //block 9
			if(playCount % 2 > 0 && moveList[8]==0) {
				moveList[8] = 1;
				playCount++;
			} else if(moveList[8]==0) {
				moveList[8] = 2;
				playCount++;
			}
		}
	}
	
	// dont use these so leave them empty 
	public void mousePressed(MouseEvent e){} 
	public void mouseEntered(MouseEvent e){} 
	public void mouseExited(MouseEvent e){} 
	public void mouseReleased(MouseEvent e){}

	public void mouseClicked(MouseEvent e) { 
		xPos = e.getX(); 
    		yPos = e.getY(); 
      		move(xPos, yPos);
      		//System.out.println("Mouse Clicked Event!");
      		// repaint the applet 
      		repaint(); 
   	}

	public int checkWin() {
		if(moveList[0] == 1 && moveList[1] == 1 && moveList[2] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[3] == 1 && moveList[4] == 1 && moveList[5] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[6] == 1 && moveList[7] == 1 && moveList[8] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[0] == 1 && moveList[3] == 1 && moveList[6] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[1] == 1 && moveList[4] == 1 && moveList[7] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[2] == 1 && moveList[5] == 1 && moveList[8] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[0] == 1 && moveList[4] == 1 && moveList[8] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[2] == 1 && moveList[4] == 1 && moveList[6] == 1) {
			winner = P1WIN;
			return winner;
		} else if(moveList[0] == 2 && moveList[1] == 2 && moveList[2] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[3] == 2 && moveList[4] == 2 && moveList[5] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[6] == 2 && moveList[7] == 2 && moveList[8] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[0] == 2 && moveList[3] == 2 && moveList[6] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[1] == 2 && moveList[4] == 2 && moveList[7] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[2] == 2 && moveList[5] == 2 && moveList[8] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[0] == 2 && moveList[4] == 2 && moveList[8] == 2) {
			winner = P2WIN;
			return winner;
		} else if(moveList[2] == 2 && moveList[4] == 2 && moveList[6] == 2) {
			winner = P2WIN;
			return winner;
		} else {
			if(checkCatWin()) {
				return CATGAME;
			}
		}
		return 0;
	}

	public void displayWinner() {
		System.out.println("winner is player" + winner);
		
	}

	public boolean checkCatWin() {
		boolean cat = false;

		if(moveList[0] == 0 || moveList[1] == 0 || moveList[2] == 0 || moveList[3] == 0 || moveList[4] == 0 || moveList[5] == 0 || moveList[6] == 0 || moveList[7] == 0 || moveList[8] == 0) {
			cat = false;
		}
		else {
			cat = true;
		}
		return cat;
	}
	
	public int[] getBoard() {
		return moveList; 
	}

	public int getPlayerTurn() {
		return this.playCount%2; //if 1 player1s turn if 0 player2s turn
	}
	
	public int getWinner() {
		return winner;
	}

	public void exit() {
		int[] temp = new int[9];
		temp = getBoard();
		for(int i = 0; i < 9; i++) {
			System.out.println(i + " is " + temp[i]);
		}
		System.exit(0);
	}
	
}
